module:   dylan
language: infix-dylan
author:   Nick Kramer (nkramer@cs.cmu.edu)
rcs-header: $Header: /scm/cvs/src/mindy/libraries/dylan/array.dylan,v 1.2 2000/01/24 04:58:21 andreas Exp $

//======================================================================
//
// Copyright (c) 1994  Carnegie Mellon University
// Copyright (c) 1998, 1999, 2000  Gwydion Dylan Maintainers
// All rights reserved.
// 
// Use and copying of this software and preparation of derivative
// works based on this software are permitted, including commercial
// use, provided that the following conditions are observed:
// 
// 1. This copyright notice must be retained in full on any copies
//    and on appropriate parts of any derivative works.
// 2. Documentation (paper or online) accompanying any system that
//    incorporates this software, or any part of it, must acknowledge
//    the contribution of the Gwydion Project at Carnegie Mellon
//    University, and the Gwydion Dylan Maintainers.
// 
// This software is made available "as is".  Neither the authors nor
// Carnegie Mellon University make any warranty about the software,
// its performance, or its conformity to any specification.
// 
// Bug reports should be sent to <gd-bugs@gwydiondylan.org>; questions,
// comments and suggestions are welcome at <gd-hackers@gwydiondylan.org>.
// Also, see http://www.gwydiondylan.org/ for updates and documentation. 
//
//======================================================================

// This is an array implementation that depends upon vectors being
// already implemented.

// GFs borrowed from the new compiler

generic dimensions (array :: <array>) => dims :: <sequence>;

generic rank (array :: <array>) => rank :: <integer>;

generic row-major-index
    (array :: <array>, #rest subscripts) => index :: <integer>;

generic aref (array :: <array>, #rest indices)
    => element :: <object>;

generic aref-setter
    (new-value :: <object>, array :: <array>, #rest indices)
    => new-value :: <object>;

generic dimension (array :: <array>, axis :: <integer>)
    => dimension :: <integer>;


class <multiD-array> (<array>)
  dimensions-slot  :: <simple-object-vector>;  // Sequence of integers
  contents-slot    :: <simple-object-vector>;
  size-slot        :: <integer>;
end;

// General array methods

def make (c == <array>,
          #key dimensions: dimensions :: <sequence> = $not-supplied, 
	       fill = #f)
 => array :: <array>;
  if (dimensions == $not-supplied)
    error("Need the dimensions or a size for an array");
  elseif (size(dimensions) = 1)
    make(<vector>, fill: fill, size: head(dimensions));
  else
    make(<multiD-array>, dimensions: dimensions, fill: fill);
  end;
end;


def row-major-index (array :: <array>, #rest indices)
 => index :: <integer>;
  let dims = dimensions(array);
  let sum = 0;
  if (size(indices) ~= size(dims))
    error("Number of indices not equal to rank. Got %=, wanted %d indices",
	  indices, size(dims));
  else
    for (index in indices,
	 dim   in dims)
      if (index < 0 | index >= dim)
	error("Array index out of bounds: %= in %=", index, indices);
      else
	sum := (sum * dim) + index;
      end;
    end;
    sum;
  end;
end;


def aref (array :: <array>, #rest indices)
 => elt :: <object>;
  let index = apply(row-major-index, array, indices);
  array[index];             // Call element
end;


def aref-setter (value :: <object>, array :: <array>, 
			   #rest indices) => value :: <object>;
  let index = apply(row-major-index, array, indices);
  array [index] := value;    // Call element-setter
end;


// rank -- the number of dimensions
//
def rank (array :: <array>) => the-rank-of-array :: <integer>;
  size(dimensions(array));
end;


// Also defined below on multiD-arrays
//
def size (array :: <array>) => size :: <integer>;
  reduce(\*, 1, dimensions(array));
end;


def dimension (array :: <array>, axis :: <integer>) 
 => dim-of-that-axis :: <integer>;
  element(dimensions(array), axis);
end;


def forward-iteration-protocol (array :: <array>)
  => (initial-state          :: <integer>,
      limit                  :: <integer>,
      next-state             :: <function>,  finished-state? :: <function>,
      current-key            :: <function>,  current-element :: <function>,
      current-element-setter :: <function>,  copy-state      :: <function>);
  values(0,                 // initial state
	 size(array),       // limit 

	      // next-state
	 method (array :: <array>, state :: <integer>) 
	  => next-state :: <integer>;
	   state + 1;
	 end,

	      // finished-state?
	 method (array :: <array>, state :: <integer>,
		 limit :: <integer>)
	  => answer :: <boolean>;
	   state = limit;
	 end,

	     // current-key
	 method (array :: <array>, state :: <integer>)
	     => key :: <integer>;
	   state;
	 end,

	     // current-element
	 method (array :: <array>, state :: <integer>)
	   array[state];
	 end,

	    // current-element-setter
	 method (value, array :: <array>, state :: <integer>)
	   array [state] := value;
	 end,

	    // copy-state
	 method (array :: <array>, state :: <integer>) 
	  => new-state :: <integer>;
	   state;
	 end);
end;


def backward-iteration-protocol (array :: <array>)
  => (final-state            :: <integer>,
      limit                  :: <integer>,
      previous-state         :: <function>,  finished-state? :: <function>,
      current-key            :: <function>,  current-element :: <function>,
      current-element-setter :: <function>,  copy-state      :: <function>);

  values(size (array) - 1,                 // final state
	 -1,                               // limit 

	     // next-state
	 method (array :: <array>, state :: <integer>)    
	   state - 1;
	 end,

	     // Everything else the same as forward-iteration-protocol

	     // finished-state?
	 method (array :: <array>, state :: <integer>,
		 limit :: <integer>)
	   state = limit;
	 end,

	     // current-key
	 method (array :: <array>, state :: <integer>)
	     => key :: <integer>;
	   state;
	 end,

	     // current-element
	 method (array :: <array>, state :: <integer>)
	   array [state];
	 end,

	    // current-element-setter
	 method (value, array :: <array>, state :: <integer>)
	   array [state] := value;
	 end,

	    // copy-state
	 method (array :: <array>, state :: <integer>) 
	  => new-state :: <integer>;
	   state;
	 end);
end;


// multiD-array code


def initialize (array :: <multiD-array>, 
                #key dimensions: dimensions :: <sequence>,
	             fill: fill = #f);

  if (size(dimensions) == 1 )
    // This code should never be executed unless someone calls
    // make on a <multiD-array> instead of make (<array>)

    error("Can't make a <multiD-array> with 1 dimension");
  end;
  array.dimensions-slot := as(<simple-object-vector>, dimensions);
  let total-size = reduce(\*, 1, array.dimensions-slot);
  array.size-slot := total-size;
  array.contents-slot := make(<simple-object-vector>, 
			      size: total-size, fill: fill);
end;


def element (array :: <multiD-array>, index :: <integer>,
             #key default: default = $not-supplied)
  => elt :: <object>;
  if (default == $not-supplied)
    array.contents-slot[index];
  else
    element(array.contents-slot, index, default: default);
  end;
end;


def element-setter (value, array :: <multiD-array>, 
			      index :: <integer>)
  => value :: <object>;
  array.contents-slot[index] := value;
end;


def size (array :: <multiD-array>) => size :: <integer>;
  array.size-slot;
end;


def shallow-copy (array :: <multiD-array>)
 => new-array :: <multiD-array>;
  let new-array = make(<multiD-array>, dimensions: array.dimensions);
  map-into(new-array, identity, array);
end;


def dimensions (array :: <multiD-array>) => dimensions :: <sequence>;
  array.dimensions-slot;
end;

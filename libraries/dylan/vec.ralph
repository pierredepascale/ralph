module: dylan
rcs-header: $Header: /scm/cvs/src/mindy/libraries/dylan/vec.dylan,v 1.4 2001/09/21 06:15:40 housel Exp $

//======================================================================
//
// Copyright (c) 1994  Carnegie Mellon University
// Copyright (c) 1998, 1999, 2000  Gwydion Dylan Maintainers
// All rights reserved.
// 
// Use and copying of this software and preparation of derivative
// works based on this software are permitted, including commercial
// use, provided that the following conditions are observed:
// 
// 1. This copyright notice must be retained in full on any copies
//    and on appropriate parts of any derivative works.
// 2. Documentation (paper or online) accompanying any system that
//    incorporates this software, or any part of it, must acknowledge
//    the contribution of the Gwydion Project at Carnegie Mellon
//    University, and the Gwydion Dylan Maintainers.
// 
// This software is made available "as is".  Neither the authors nor
// Carnegie Mellon University make any warranty about the software,
// its performance, or its conformity to any specification.
// 
// Bug reports should be sent to <gd-bugs@gwydiondylan.org>; questions,
// comments and suggestions are welcome at <gd-hackers@gwydiondylan.org>.
// Also, see http://www.gwydiondylan.org/ for updates and documentation. 
//
//======================================================================
//
//  This file contains the support for vectors that isn't builtin.
//


//// Iteration protocol.

def vector-prev-state (vec :: <vector>, state :: <integer>) 
    => prev :: <integer>;
  state - 1;
end;

def vector-next-state(vec :: <vector>, state :: <integer>)
    => next :: <integer>;
  state + 1;
end;

def vector-finished?(vec :: <vector>, state :: <integer>,
	             limit :: <integer>)
  state == limit;
end;

def vector-current-key(vec :: <vector>, state :: <integer>)
    => cur-key :: <integer>;
  state;
end;

def vector-current-element(vec :: <vector>, state :: <integer>)
    => cur-elt :: <object>;
  element(vec, state);
end;

def vector-current-element-setter(value :: <object>, vec :: <vector>,
			          state :: <integer>)
    => value :: <object>;
  element(vec, state) := value;
end;

def vector-copy-state(vec :: <vector>, state :: <integer>)
    => state :: <integer>;
  state;
end;

def forward-iteration-protocol (vec :: <vector>)
 => (initial-state :: <object>,
     limit :: <object>,
     next-state :: <function>,
     finished-state? :: <function>,
     current-key :: <function>,
     current-element :: <function>,
     current-element-setter :: <function>,
     copy-state :: <function>);
  values(0, size(vec), vector-next-state, vector-finished?,
	 vector-current-key, vector-current-element,
	 vector-current-element-setter, vector-copy-state);
end;

def backward-iteration-protocol (vec :: <vector>)
 => (initial-state :: <object>,
     limit :: <object>,
     next-state :: <function>,
     finished-state? :: <function>,
     current-key :: <function>,
     current-element :: <function>,
     current-element-setter :: <function>,
     copy-state :: <function>);
  values(size(vec) - 1, -1, vector-prev-state, vector-finished?,
	 vector-current-key, vector-current-element,
	 vector-current-element-setter, vector-copy-state);
end;


//// Collection routines.

def \=(vec1 :: <vector>, vec2 :: <vector>) => answer :: <boolean>;
  let (size1, size2) = values(size(vec1), size(vec2));
  (size1 == size2) & for (index from 0 below size1,
			  while: vec1[index] = vec2[index])
		    finally
		      // #t iff we fell off the end
		      index == size1;
		    end;
end;

// No collection alignment done here because it only handles the
// all-vector case.
def map-as(cls :: limited(<class>, subclass-of: <vector>),
           function :: <function>,
	   vector :: <vector>,
	   #next next-method,
           #rest more_vectors)
 => result :: <vector>;
  if (empty?(more_vectors))
    let size = size(vector);
    let result = make(cls, size: size);
    for (key from 0 below size)
      result[key] := function(vector[key]);
    end;
    result;
  elseif (~every?(rcurry(instance?, <vector>), more_vectors))
    next-method();
  else
    let size = reduce(method (a, b) min(a, size(b)) end, size(vector),
		      more_vectors);
    let result = make(cls, size: size);
    for (key from 0 below size)
      result[key] := apply(function, vector[key],
			   map(rcurry(element, key), more_vectors));
    end;
    result;
  end;
end;

def concatenate-as(cls :: <class>, vector :: <vector>,
		   #next next-method,
		   #rest more_vectors)
 => result :: <vector>;
  if (~subtype?(cls, <vector>) |
	~every?(rcurry(instance?, <vector>), more_vectors))
    next-method();
  else 
    let length = reduce(method (int, seq) int + size(seq) end,
			size(vector), more_vectors);
    let result = make(cls, size: length);
    local do_copy(state, vector :: <vector>) // :: state
	    for (state from state,
		 key from 0 below size(vector))
	      result[state] := vector[key];
	    finally state;
	    end;
	  end;
    reduce(do_copy, do_copy(0, vector), more_vectors);
    result;
  end;
end;

def member?(value :: <object>, vector :: <vector>,
            #key test = \==)
 => answer :: <boolean>;
  block (return)
    for (key from 0 below size(vector))
      if (test(value, vector[key])) return(#t) end;
    end;
  end;
end;

def empty?(vector :: <vector>)
 => answer :: <boolean>;
  size(vector) = 0;
end;

// No collection alignment done here because it only handles the
// all-vector case.
def every?(proc :: <function>, vector :: <vector>,
           #next next_method,
           #rest more_vectors)
 => answer :: <boolean>;
  if (empty?(more_vectors))
    block (return)
      for (key from 0 below size(vector))
	unless (proc(vector[key])) return(#f) end;
      end;
      #t;
    end;
  elseif (every?(rcurry(instance?, <vector>), more_vectors))
    // since we only specify one sequence, this will not produce an infinite
    // recursion.
    block (return)
      let sz = reduce(method(a,b) min(a, size(b)) end,
		      size(vector), more_vectors);
      for (key from 0 below sz)
	let result = apply(proc, vector[key],
			   map(rcurry(element, key), more_vectors));
	unless (result) return(#f) end;
      end;
      #t;
    end;
  else
    next_method();
  end;
end;

// The next two functions are usually called upon rest vectors, so we should
// handle the vector case as fast as possible.
def reduce(proc :: <function>, init-val, collection :: <vector>)
 => answer :: <object>;
for (value = init-val then proc(value, collection[i]),
       i from 0 below collection.size)
  finally value;
  end;
end;

def reduce1(proc :: <function>, collection :: <vector>)
 => answer :: <object>;
  let sz = collection.size;
  select (sz)
    // Handle the most common cases first.
    2 => proc(collection[0], collection[1]);
    1 => collection[0];
    0 => error("Reduce1 not defined for empty collections.");
    otherwise =>
      for (value = collection[0] then proc(value, collection[i]),
	   i from 1 below sz)
      finally
	value;
      end;
  end;
end;

def subsequence-position(big :: <vector>, pattern :: <vector>,
	  	         #key test = \==, count = 1)
 => (position :: false-or(<integer>));
  let sz = size(big);
  let pat-sz = size(pattern);

  select (pat-sz)
    0 =>
      0;
    1 =>
      let ch = pattern[0];
      for (key from 0 below sz,
	   until: test(big[key], ch) & (count := count - 1) <= 0)
      finally
	if (key < sz) key end;
      end;
    2 =>
      let ch1 = pattern[0];
      let ch2 = pattern[1];
      for (key from 0 below sz - 1,
	   until: test(big[key], ch1) & test(big[key + 1], ch2)
	     & (count := count - 1) <= 0)
      finally
	if (key < (sz - 1)) key end;
      end;
    otherwise =>
      local search(index, big-key, pat-key, count)
	      case
		pat-key >= pat-sz =>  // End of pattern -- We found one.
		  if (count = 1) index
		  else search(index + 1, index + 1, 0, count - 1);
		  end;
		big-key = sz =>	      // End of big vector -- it's not here.
		  #f;
		test(big[big-key], pattern[pat-key]) =>
		  // They match -- try one more.
		  search(index, big-key + 1, pat-key + 1, count);
		otherwise =>          // Don't match -- try one further along.
		  search(index + 1, index + 1, 0, count);
	      end;
	    end;
      search(0, 0, 0, count);
  end;
end;

def subsequence-position(big :: <byte-string>,
			 pattern :: <byte-string>,
			 #key test = \==, count = 1)
 => (position :: false-or(<integer>));
  let sz = size(big);
  let pat-sz = size(pattern);

  select (pat-sz)
    0 =>
      0;
    1 =>
      let ch = pattern[0];
      for (key from 0 below sz,
	   until: test(big[key], ch) & (count := count - 1) <= 0)
      finally
	if (key < sz) key end;
      end;
    2 =>
      let ch1 = pattern[0];
      let ch2 = pattern[1];
      for (key from 0 below sz - 1,
	   until: test(big[key], ch1) & test(big[key + 1], ch2)
	     & (count := count - 1) <= 0)
      finally
	if (key < (sz - 1)) key end;
      end;
    otherwise =>
      if (test ~= \==)
	local search(index, big-key, pat-key, count)
		case
		  pat-key >= pat-sz =>  // End of pattern -- We found one.
		    if (count = 1) index
		    else search(index + 1, index + 1, 0, count - 1);
		    end;
		  big-key = sz =>      // End of big vector -- it's not here.
		    #f;
		  test(big[big-key], pattern[pat-key]) =>
		    // They match -- try one more.
		    search(index, big-key + 1, pat-key + 1, count);
		  otherwise =>         // Don't match -- try one further along.
		    search(index + 1, index + 1, 0, count);
		end;
	      end;
	search(0, 0, 0, count);
      else
	// It's worth doing something Boyer-Moore-ish....
	let pat-last = pat-sz - 1;
	let last-char = pattern[pat-last];
	let skip = make(<vector>, size: 256, fill: pat-sz);
	for (i from 0 below pat-last)
	  skip[as(<integer>, pattern[i])] := pat-last - i;
	end;
	local do-skip(index, count)
		if (index >= sz)
		  #f;
		else 
		  let char = big[index];
		  if (char == last-char)
		    search(index - pat-last, index, pat-last, count);
		  else
		    do-skip(index + skip[as(<integer>, char)], count);
		  end;
		end;
	      end,
              search(index, big-key, pat-key, count)
		case
		  pat-key < 0 =>  // End of pattern -- We found one.
		    if (count = 1) index
		    else do-skip(index + pat-sz, count - 1)
		    end;
		  big[big-key] == pattern[pat-key] =>
		    // They match -- try one more.
		    search(index, big-key - 1, pat-key - 1, count);
		  otherwise =>    // Don't match -- try one further along.
		    do-skip(index + pat-sz, count);
		end;
	      end;
	do-skip(pat-last, count);
      end;
  end;
end;

def replace-elements!(vector :: <vector>,
		      predicate :: <function>,
		      new_value_fn :: <function>,
		      #key count: count) => vec :: <vector>;
  for (key from 0 below size(vector),
       until: count == 0)
    let this_element = vector[key];
    if (predicate(this_element))
      vector[key] := new_value_fn(this_element);
      if (count) count := count - 1 end;
    end;
  end;
  vector;
end;

// No collection alignment done here because it only handles the
// all-vector case.
def do(proc :: <function>, vector :: <vector>,
       #next next_method,
       #rest more_vectors)
 => answer :: singleton(#f);
  if (empty?(more_vectors))
    for (key from 0 below size(vector)) proc(vector[key]) end;
  elseif (every?(rcurry(instance?, <vector>), more_vectors))
    let size = reduce(method (sz, vec) min(sz, size(vec)) end,
		      size(vector), more_vectors);
    for (key from 0 below size)
      apply(proc, vector[key],
	    map(rcurry(element, key), more_vectors));
    end;
  else
    next_method();
  end;
end;

def fill!(vector :: <vector>, value :: <object>,
          #key start: first = 0, end: last)
 => vector :: <vector>;
  let last = if (last) min(last, size(vector)) else size(vector) end;
  for (i from first below last)
    vector[i] := value;
  end;
  vector;
end;

def copy-sequence(vector :: <vector>, #key start = 0, end: last)
 => vector :: <vector>;
  let src-sz = size(vector);
  let last = if (last & last < src-sz) last else src-sz end;
  let sz = if (start <= last) 
	     last - start;
	   else
	     error("End: (%=) is smaller than start: (%=)", last, start);
	   end;
  let result = make(type-for-copy(vector), size: sz);
  for (src-index from start, index from 0 below sz)
    result[index] := vector[src-index];
  end;
  result;
end;


//// Array methods.

def aref (vector :: <vector>, #rest indices)
 => elt :: <object>;
  if (indices.size == 1)
    vector[indices[0]];
  else
    error("Invalid number of indices for %=.  Expected 1, got %d",
	  vector, indices.size);
  end;
end;

def aref-setter (new, vector :: <vector>, #rest indices)
 => new :: <object>;
  if (indices.size == 1)
    vector[indices[0]] := new;
  else
    error("Invalid number of indices for %=.  Expected 1, got %d",
	  vector, indices.size);
  end;
end;

def size (v :: <vector>) => size :: <integer>;
  error("The array method for size must be overridden by vectors.");
end;

def dimensions (v :: <vector>) => dimensions :: <sequence>;
  vector (size (v));
end;


//// Special purpose element setter methods.

def element-setter (value, v :: <byte-vector>, index :: <integer>)
 => new :: <object>;
  error("%= is not an integer between 0 and 255.", value);
end;

def element-setter (value, v :: <buffer>, index :: <integer>)
 => new :: <object>;
  error("%= is not an integer between 0 and 255.", value);
end;


//// Other special purpose methods

def as(class == <simple-object-vector>, collection :: <collection>)
    => res :: <simple-object-vector>;
  let res = make(<simple-object-vector>, size: collection.size);
  for (index :: <integer> from 0, element in collection)
    res[index] := element;
  end;
  res;
end;

module: hello-world
homepage: http://weblog.jamisbuck.org/2010/12/27/maze-generation-recursive-backtracking
help: run it with mindyc -ldylan -o maze.dbc maze.ralph && mindy -f maze.dbc

library hello-world
  use Dylan;
end;

module hello-world
  use dylan;
  use extensions;
  use cheap-io;
end;

def *width* = 10;
def *height* = 10;

def grid = make(<array>, dimensions: list(*width*, *height*), fill: 0) ;

def N,S,E,W = values(1,2,4,8) ;

def OPPOSITE(d)
  select (d) E => W ; W => E ; N => S ; S => N end;
end;

def DX(d)
  select (d)
    E => 1 ; W => -1 ; N => 0 ; S => 0
  end;
end;

def DY(d)
  select(d)
    E => 0 ; W => 0 ; N => -1 ; S => 1
  end;
end;

def *seed* = 23;

def random(n)
  let v =  modulo(*seed* * 16807 + 0, 65535) ;
  *seed* := v ;
  modulo(v, n)
end;

def $digits = "01234567879ABCDEFGHIJKLMNOPQRSTUVWXYZ";

def as(type == <string>, arg :: <integer>) => as-string :: <string>;
  local
    repeat(arg, digits)
      let (q,r) = floor/(arg, 10);
      let digits = pair($digits[as(<integer>, r)], digits);
      if (zero?(q))
        as(<string>, digits) ;
      else
        repeat(q, digits);
      end;
    end;
  if(negative?(arg))
    concatenate("-", repeat(-arg, #())) ;
  else
    repeat(arg, #()) ;
  end;
end;

def carve-passages-from(cx, cy, grid)
  let directions = sort(list(N, S, E, W), test: fn(a,b) random(10) < 5 end) ;
  for (direction in directions)
    let nx, ny = values(cx + DX(direction), cy + DY(direction)) ;
    if (0 <= nx & nx < *width* &
        0 <= ny & ny < *height* &
        aref(grid, nx, ny) = 0)
      aref(grid, cx, cy) := logior(aref(grid, cx, cy), direction);
      aref(grid, nx, ny) := logior(aref(grid, nx, ny), OPPOSITE(direction));
      carve-passages-from(nx, ny, grid) ;
    end;
  end;
end;

carve-passages-from(0,0, grid) ;

def \* (a :: <character>, n :: <integer>)
  make(<string>, size: n, fill: a)
end;

puts(concatenate(" ", '_' * (*width* * 2 - 1))) ;
puts("\n");

for(y from 0 below *height*)
  puts("|") ;
  for(x from 0 below *width*)
    puts(if (logand(aref(grid, x, y), S) ~= 0) " " else "_" end);
    if (logand(aref(grid, x, y), E) ~= 0)
      puts(if (logand(logior(aref(grid, x,y), aref(grid, x + 1, y)), S) ~= 0) " " else "_" end) ;
    else
      puts("|")
    end;
  end ;
  puts("\n") ;
end;
